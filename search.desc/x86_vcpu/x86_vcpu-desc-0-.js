searchState.loadedDescShard("x86_vcpu", 0, "x86_vcpu\nAccess to Advanced Programmable Interrupt Controller …\nAPIC write occurred.\nCPUID instruction was executed.\nControl Register (CR) access.\nDebug Register (DR) access.\nENCLS instruction was executed.\nExtended Page Table (EPT) misconfiguration occurred.\nExtended Page Table (EPT) violation occurred.\nException or non-maskable interrupt (NMI) occurred.\nAn external interrupt was received.\nAccess to Global Descriptor Table Register (GDTR) or …\nGETSEC instruction was executed.\nGeneral-purpose registers for the 64-bit x86 architecture.\nThe information of guest page walk.\nHLT instruction was executed.\nINIT signal was received.\nAn interrupt window was open.\nGuest state is invalid.\nINVD instruction was executed.\nINVEPT instruction was executed.\nINVLPG instruction was executed.\nINVPCID instruction was executed.\nINVVPID instruction was executed.\nI/O instruction was executed.\nAccess to Local Descriptor Table Register (LDTR) or Task …\nLOADIWKEY instruction was executed.\nMachine Check Exception (MCE) occurred during VM entry.\nMONITOR instruction was executed.\nMonitor trap flag triggered.\nMSR load failed.\nModel-Specific Register (MSR) read.\nModel-Specific Register (MSR) write.\nMWAIT instruction was executed.\nAn NMI window was open.\nOther SMI was received.\nPAUSE instruction was executed.\nPCONFIG instruction was executed.\nPage modification log (PML) became full.\nPreemption timer expired.\nRDPMC instruction was executed.\nRDRAND instruction was executed.\nRDSEED instruction was executed.\nRDTSC instruction was executed.\nRDTSCP instruction was executed.\nThe names of the general-purpose registers in 64-bit x86 …\nRSM instruction was executed in SMM.\nStartup IPI (SIPI) was received.\nSystem Management Interrupt (SMI) was received.\nSPP event occurred.\nA task switch occurred.\nTPAUSE instruction was executed.\nTask Priority Register (TPR) below threshold.\nA triple fault occurred.\nUMWAIT instruction was executed.\nVirtualized End Of Interrupt (EOI) was executed.\nVMCALL instruction was executed.\nVMCLEAR instruction was executed.\nVMFUNC was executed.\nVMLAUNCH instruction was executed.\nVMOFF instruction was executed.\nVMON instruction was executed.\nVMPTRLD instruction was executed.\nVMPTRST instruction was executed.\nVMREAD instruction was executed.\nVMRESUME instruction was executed.\nVMWRITE instruction was executed.\nRepresents the per-CPU state for Virtual Machine …\nA virtual CPU within a guest.\nVM-Exit Informations. (SDM Vol. 3C, Section 24.9.1)\nVMX basic exit reasons, as defined in the Intel Software …\nVM-Entry/VM-Exit Interruption-Information Field. (SDM Vol. …\nExit Qualification for I/O Instructions. (SDM Vol. 3C, …\nWBINVD instruction was executed.\nXRSTORS instruction was executed.\nXSAVES instruction was executed.\nXSETBV instruction was executed.\nSize of access.\nAdvance guest <code>RIP</code> by <code>instr_len</code> bytes.\nReturns the value of the “ah” register, which is the …\nReturns the value of the “al” register, which is the …\nInformation for VM exits due to APIC access.\nReturns the value of the “ax” register, which is the …\nReturns the value of the “bh” register, which is the …\nBind this <code>VmxVcpu</code> to current logical processor.\nRaw bits for writing to VMCS.\nReturns the value of the “bl” register, which is the …\nReturns the value of the “bp” register, which is the …\nReturns the value of the “bpl” register, which is the …\nReturns the value of the “bx” register, which is the …\nReturns the value of the “ch” register, which is the …\nReturns the value of the “cl” register, which is the …\nGuest cs. (<code>cs</code>)\nReturns the value of the “cx” register, which is the …\nReturns the value of the “dh” register, which is the …\nReturns the value of the “di” register, which is the …\nReturns the value of the “dil” register, which is the …\nReturns the value of the “dl” register, which is the …\nReturns the value of the “dx” register, which is the …\nReturns the value of the “eax” register, which is the …\nReturns the value of the “ebp” register, which is the …\nReturns the value of the “ebx” register, which is the …\nReturns the value of the “ecx” register, which is the …\nReturns the value of the “edi” register, which is the …\nReturns the value of the “edx” register, which is the …\nVM-entry failure. (0 = true VM exit; 1 = VM-entry failure)\nFor hardware exceptions that would have delivered an error …\nReturns the value of the “esi” register, which is the …\nBasic information about VM exits.\nFor VM exits resulting from instruction execution, this …\nBasic exit reason.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from the interrupt vector and the error code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet CPU mode of the guest.\nReturns the value of the <code>edx:eax</code> register pair.\nGet Translate guest page table info\nReturns the value of the general-purpose register …\nTranslate guest virtual addr to linear addr\nGuest <code>RIP</code> where the VM exit occurs.\nReturn if current platform support virtualization …\nRun the guest. It returns when a vm-exit happens and …\nDetermines details of how the injection is performed.\nInformation for VM exits due to external interrupts.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation for VM exits due to I/O instructions.\nDirection of the attempted access (0 = OUT, 1 = IN).\nGuest page table instruction fetch\nREP prefixed (0 = not REP; 1 = REP).\nGuest page table Supervisor mode access prevention\nGuest page table Supervisor mode execution protection\nString instruction (0 = not string; 1 = string).\nGuest page table user mode\nGuest page table write access\nGuest page table level.\nInformation for VM exits due to nested page table faults …\nCreate a new <code>VmxVcpu</code>.\nMSR_IA32_EFER_NXE_BIT\nPort number. (as specified in DX or in an immediate …\nCR4.PSE for 32bit paging, true for PAE/4-level paging\nAdd a virtual interrupt or exception to the pending events …\nThe R10 register, an additional general-purpose register …\nReturns the value of the “r10b” register, which is the …\nReturns the value of the “r10d” register, which is the …\nReturns the value of the “r10w” register, which is the …\nThe R11 register, an additional general-purpose register …\nReturns the value of the “r11b” register, which is the …\nReturns the value of the “r11d” register, which is the …\nReturns the value of the “r11w” register, which is the …\nThe R12 register, an additional general-purpose register …\nReturns the value of the “r12b” register, which is the …\nReturns the value of the “r12d” register, which is the …\nReturns the value of the “r12w” register, which is the …\nThe R13 register, an additional general-purpose register …\nReturns the value of the “r13b” register, which is the …\nReturns the value of the “r13d” register, which is the …\nReturns the value of the “r13w” register, which is the …\nThe R14 register, an additional general-purpose register …\nReturns the value of the “r14b” register, which is the …\nReturns the value of the “r14d” register, which is the …\nReturns the value of the “r14w” register, which is the …\nThe R15 register, an additional general-purpose register …\nReturns the value of the “r15b” register, which is the …\nReturns the value of the “r15d” register, which is the …\nReturns the value of the “r15w” register, which is the …\nThe R8 register, an additional general-purpose register …\nReturns the value of the “r8b” register, which is the …\nReturns the value of the “r8d” register, which is the …\nReturns the value of the “r8w” register, which is the …\nThe R9 register, an additional general-purpose register …\nReturns the value of the “r9b” register, which is the …\nReturns the value of the “r9d” register, which is the …\nReturns the value of the “r9w” register, which is the …\nRaw information for VM Exits Due to Vectored Events, See …\nThe RAX register, typically used for return values in …\nThe RBP register, often used as a frame pointer in …\nThe RBX register, usually used as a base pointer or to …\nThe RCX register, often used as a counter in loops.\nThe RDI register, often used as a destination index in …\nThe RDX register, commonly used for I/O operations.\nReturns the name of the register corresponding to the …\nGuest general-purpose registers.\nMutable reference of guest general-purpose registers.\nGuest rip. (<code>RIP</code>)\nThe RSI register, often used as a source index in string …\nSets the value of the “ah” register, which is the bits …\nSets the value of the “al” register, which is the bits …\nSets the value of the “ax” register, which is the bits …\nSets the value of the “bh” register, which is the bits …\nSets the value of the “bl” register, which is the bits …\nSets the value of the “bp” register, which is the bits …\nSets the value of the “bpl” register, which is the …\nSets the value of the “bx” register, which is the bits …\nSets the value of the “ch” register, which is the bits …\nSets the value of the “cl” register, which is the bits …\nSets the value of the “cx” register, which is the bits …\nSets the value of the “dh” register, which is the bits …\nSets the value of the “di” register, which is the bits …\nSets the value of the “dil” register, which is the …\nSets the value of the “dl” register, which is the bits …\nSets the value of the “dx” register, which is the bits …\nSets the value of the “eax” register, which is the …\nSets the value of the “ebp” register, which is the …\nSets the value of the “ebx” register, which is the …\nSets the value of the “ecx” register, which is the …\nSets the value of the “edi” register, which is the …\nSets the value of the “edx” register, which is the …\nSets the value of the “esi” register, which is the …\nIf enable, a VM exit occurs at the beginning of any …\nSet I/O intercept by modifying I/O bitmap.\nSet msr intercept by modifying msr bitmap. Todo: …\nSets the value of the “r10b” register, which is the …\nSets the value of the “r10d” register, which is the …\nSets the value of the “r10w” register, which is the …\nSets the value of the “r11b” register, which is the …\nSets the value of the “r11d” register, which is the …\nSets the value of the “r11w” register, which is the …\nSets the value of the “r12b” register, which is the …\nSets the value of the “r12d” register, which is the …\nSets the value of the “r12w” register, which is the …\nSets the value of the “r13b” register, which is the …\nSets the value of the “r13d” register, which is the …\nSets the value of the “r13w” register, which is the …\nSets the value of the “r14b” register, which is the …\nSets the value of the “r14d” register, which is the …\nSets the value of the “r14w” register, which is the …\nSets the value of the “r15b” register, which is the …\nSets the value of the “r15d” register, which is the …\nSets the value of the “r15w” register, which is the …\nSets the value of the “r8b” register, which is the …\nSets the value of the “r8d” register, which is the …\nSets the value of the “r8w” register, which is the …\nSets the value of the “r9b” register, which is the …\nSets the value of the “r9d” register, which is the …\nSets the value of the “r9w” register, which is the …\nSets the value of the general-purpose register …\nSets the value of the “si” register, which is the bits …\nSets the value of the “sil” register, which is the …\nSet guest stack pointer. (<code>RSP</code>)\nSet the new <code>VmxVcpu</code> context from guest OS.\nReturns the value of the “si” register, which is the …\nReturns the value of the “sil” register, which is the …\nGuest stack pointer. (<code>RSP</code>)\nThe guest page table physical address.\nUnbind this <code>VmxVcpu</code> from current logical processor.\nWhether the field is valid.\nVector of interrupt or exception.\nGuest page table width\nCR0.WP")